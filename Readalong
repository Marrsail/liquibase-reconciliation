# Liquibase Release Tagging & Deployment Process

This document outlines the standardized process for tagging and releasing Liquibase changelogs using Git annotated tags, Semantic Versioning, and GitHub Releases.

---

## üè∑Ô∏è Tag Format

We use [Semantic Versioning (SemVer)](https://semver.org/), with annotated Git tags:


### Examples:
- `v1.0.0` ‚Äì First production-ready changelog release
- `v1.2.1` ‚Äì Minor changes (e.g., new tables or grants)
- `v2.0.0` ‚Äì Major changes or breaking modifications

> ‚ö†Ô∏è **Use annotated tags only.** Avoid lightweight tags.

---

## ‚úçÔ∏è Creating an Annotated Tag

```bash
git tag -a v1.0.0 -m "Initial Liquibase changelog release"
git push origin v1.0.0


This will:
	‚Ä¢	Tag the current commit
	‚Ä¢	Push the tag to GitHub
	‚Ä¢	(Once pipeline is configured) Trigger a GitHub Actions workflow

‚∏ª

Tag Contents

Each tag must point to a complete, deployable changelog package, including:
	‚Ä¢	db.changelog-master.xml
	‚Ä¢	All referenced changelog files (e.g., schema, roles, users, grants)
	‚Ä¢	A flattened directory structure (no nested folders)

‚∏ª

Post-Tag Action

When a tag is pushed:
	‚Ä¢	A GitHub Action will package the changelog files into a ZIP
	‚Ä¢	The ZIP will be uploaded to an S3 bucket:

s3://liquibase-artifacts-centralized/<tag>/vhb-liquibase.zip


This makes the changelog available to Lambda functions or automated deployment systems in each environment

Best Practices
	‚Ä¢	Only tag when the changelog files are reviewed and approved
	‚Ä¢	Keep changelog structure consistent (flattened, no nested folders)
	‚Ä¢	Follow a changelog review and promotion process (Dev ‚Üí UAT ‚Üí Prod)

‚∏ª


